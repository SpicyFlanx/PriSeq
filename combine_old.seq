


	
Super inefficient way...

"""
form pairs of two kmers, if they satisy Cp
combinatorially loop over all possible pairs of kmers
	(You should only check pairs in a certain 'search window of combinable reverse primers' "accessed by adding amplicon length range")

"""

# would be TKMerID
class KmerStartingAtIndex:
	def init(kmer, lengths):
		self.kmer = kmer
		self.lengths = lengths


def combine(filtered_kmers):
	primer_pair_list = []

	# Create condensed version of filtered_kmers
	for kmer in filtered_kmers:
		# I need the index in the sequence of every kmer.
		# Then every one that starts at the same place must be combined into one object
		# Each such object must be put in a list, in (original sequence) index order.
		
	# Loop through each
	for kmer_set in condensed_kmers:
		# get the index of the kmer_set from the kmer_set object
		# create a window of viable indices
		w_begin = current_index + KAPPA_MIN + TRANSCRIPT_MIN_LEN
		w_end = current_index + KAPPA_MAX + TRANSCRIPT_MIN_LEN + 1
		# Make a function that converts from the original sequence index to the condensed_kmers index, call it idx_converter
		w_idx = idx_converter(w_begin)
		end_idx = idx_converter(w_end)
		while w_idx < end_idx:
			If xanneal_filter(kmer_set, condensed_kmers[w_idx]):
				for len1 in kmer_set.lengths:
					if cp_check(kmer_set.truncate_to(len1)):
						for len2 in condensed_kmers[w_idx]:
							If cp_check(condensed_kmers[w_idx].truncate_to(len2)):
								primer_pair_list.append(kmer_set.kmer, len1, condensed_kmers[w_idx], len2)
					
		



			
			
			
	