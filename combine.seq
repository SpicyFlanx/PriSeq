from bio import * 
from bio.fmindex import *

from cfg import *
from filter import *

def get_primer_pairs(fm_idx, fwd_mers, bwd_mers):
	
	# region : [(sequence, locus), ...]
	fwd_mers_by_contig = Dict[str, List[Tuple[str, int]]]()
	bwd_mers_by_contig = Dict[str, List[Tuple[str, int]]]()
	# region : [((s+, l),(s-, l)), ...]
	primer_pairs_by_contig = Dict[str, List[Tuple[Tuple[str, int], Tuple[str, int]]]]()

	# Seperate the candidate kmers by region, 
	# I guess we really didn't need to fetch + and - into seperate dicts
	for s in fwd_mers:
		for occ in fm_idx.locate(seq(s)):
			if not occ[1] in fwd_mers_by_contig:
				fwd_mers_by_contig[occ[1]] = []
			fwd_mers_by_contig[occ[1]].append((s, occ[2]))

			# 0: rid
			# 1: record name
			# 2: 0-based pos
			# 3: reversed?

	for s in bwd_mers:
		for occ in fm_idx.locate(seq(s), both_strands=True):
			if occ[3]: # Only ones on reverse
				if not occ[1] in bwd_mers_by_contig:
					bwd_mers_by_contig[occ[1]] = []
				bwd_mers_by_contig[occ[1]].append((s, occ[2]))


	for region in fwd_mers_by_contig:
		primer_pairs_by_contig[region] = []

		for sl1 in fwd_mers_by_contig[region]:
			# check for a good pair w/ each bwd candidate
			for sl2 in bwd_mers_by_contig[region]:
				# Run pair filters on sequences from the pair 
				# TODO: some of these filters get run additional times
				if pair_filters(seq(sl1[0]), seq(sl2[0])) and pair_read_filters(sl1, sl2): 
					primer_pairs_by_contig[region].append((sl1, sl2)) 
	return primer_pairs_by_contig

